---
alwaysApply: true
---

# MCP Host 프로젝트 개발 가이드

이 프로젝트는 Next.js 기반의 현대적인 프론트엔드 애플리케이션입니다.

## 🎯 핵심 기술 스택

### 프레임워크 & 언어
- **Next.js 15** (App Router 사용)
- **TypeScript** (엄격한 타입 체크)
- **pnpm** (패키지 관리자)

### UI & 스타일링
- **Shadcn UI** - 기본 컴포넌트 라이브러리
- **Tailwind CSS** - 유틸리티 우선 CSS 프레임워크
- **Lucide React** - 아이콘 라이브러리
- **Framer Motion** - 애니메이션 라이브러리

### 에디터 & 텍스트
- **CodeMirror** - 코드 에디터 (JavaScript/Python 지원)
- **ProseMirror** - 리치 텍스트 에디터
- **React Markdown** - 마크다운 렌더링

## 📋 개발 규칙

### 1. 컴포넌트 개발
```typescript
// 컴포넌트 구조 예시
interface ComponentProps {
  // props 타입 정의
}

export default function Component({ ...props }: ComponentProps) {
  // 컴포넌트 로직
  return (
    <div className="tailwind-classes">
      {/* JSX 구조 */}
    </div>
  );
}
```

### 2. 스타일링 가이드
- **Tailwind CSS** 클래스 우선 사용
- **shadcn/ui** 컴포넌트 재사용 (`pnpm dlx shadcn@latest add [component]`)
- **clsx** 또는 **cn** 함수로 조건부 클래스 관리
- **Framer Motion** 애니메이션 적극 활용

### 3. 상태 관리
- **SWR** - 서버 상태 관리 및 데이터 페칭
- **React Hooks** - 컴포넌트 상태 관리
- **usehooks-ts** - 유틸리티 훅 활용

### 4. 파일 구조
```
src/
├── app/              # Next.js App Router 페이지
├── components/       # 재사용 가능한 컴포넌트
│   └── ui/          # Shadcn UI 컴포넌트
├── lib/             # 유틸리티 함수
├── hooks/           # 커스텀 훅
└── types/           # 타입 정의
```

### 5. 에디터 통합
- **CodeMirror** 사용 시 `@codemirror/theme-one-dark` 테마 적용
- **ProseMirror** 플러그인 조합으로 리치 에디터 구성
- **React Markdown** 렌더링 시 적절한 스타일링 적용

### 6. 데이터 처리
- **PapaParse** - CSV 파일 처리
- **date-fns** - 날짜 처리
- **nanoid** - 고유 ID 생성
- **fast-deep-equal** - 객체 비교

### 7. 테마 & 접근성
- **next-themes** - 다크/라이트 모드 구현
- **Sonner** - 토스트 알림 시스템
- **Geist** 폰트 사용

## 🔧 코딩 컨벤션

### TypeScript
- 엄격한 타입 정의 사용
- `interface` 선호 (props, API 응답 등)
- `type` 유니언/유틸리티 타입에 사용

### 네이밍
- **컴포넌트**: PascalCase (예: `DataTable`, `CodeEditor`)
- **훅**: camelCase with 'use' prefix (예: `useLocalStorage`)
- **유틸리티**: camelCase (예: `formatDate`, `generateId`)

### 임포트 순서
```typescript
// 1. React 관련
import React from 'react';

// 2. 외부 라이브러리
import { motion } from 'framer-motion';
import { toast } from 'sonner';

// 3. 내부 컴포넌트
import { Button } from '@/components/ui/button';

// 4. 유틸리티
import { cn } from '@/lib/utils';
```

## 🚀 성능 최적화

- **React.memo** 적절히 활용
- **useMemo**, **useCallback** 최적화
- **React Resizable Panels** 레이아웃 최적화
- **SWR** 캐싱 전략 활용

## 📦 패키지 관리

- **pnpm** 사용 필수
- 새 패키지 추가 시 TypeScript 타입 포함 확인
- 개발 의존성은 `-D` 플래그 사용

## 🎨 UI/UX 가이드

- **모바일 우선** 반응형 디자인
- **접근성** 고려한 컴포넌트 설계
- **일관된 스페이싱** (Tailwind 스페이스 시스템)
- **사용자 피드백** (로딩, 에러, 성공 상태)

항상 위 가이드라인을 준수하여 일관성 있고 유지보수가 용이한 코드를 작성하세요.