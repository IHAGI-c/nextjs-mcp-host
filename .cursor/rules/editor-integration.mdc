---
description: CodeMirror 코드 에디터 통합, ProseMirror 리치 텍스트 에디터 구현, 에디터 테마 설정, 언어별 구문 하이라이팅, 에디터 플러그인 설정, 텍스트 편집기 상태 관리, 에디터 컴포넌트 개발 작업에 도움이 되는 룰입니다.
alwaysApply: false
---
# 에디터 통합 가이드

## 📝 CodeMirror 설정

### 기본 설정
```typescript
import { EditorView, basicSetup } from "codemirror"
import { javascript } from "@codemirror/lang-javascript"
import { python } from "@codemirror/lang-python"
import { oneDark } from "@codemirror/theme-one-dark"

const extensions = [
  basicSetup,
  javascript(),
  python(),
  oneDark,
  EditorView.theme({
    "&": {
      fontSize: "14px",
    },
    ".cm-content": {
      padding: "12px",
    },
  }),
]
```

### 언어별 설정
```typescript
const getLanguageExtension = (language: string) => {
  switch (language) {
    case "javascript":
    case "typescript":
      return javascript()
    case "python":
      return python()
    default:
      return []
  }
}
```

## 📄 ProseMirror 설정

### 기본 스키마
```typescript
import { schema } from "prosemirror-schema-basic"
import { addListNodes } from "prosemirror-schema-list"
import { Schema } from "prosemirror-model"

const mySchema = new Schema({
  nodes: addListNodes(schema.spec.nodes, "paragraph block*", "block"),
  marks: schema.spec.marks,
})
```

### 플러그인 조합
```typescript
import { history } from "prosemirror-history"
import { keymap } from "prosemirror-keymap"
import { baseKeymap } from "prosemirror-commands"
import { dropCursor } from "prosemirror-dropcursor"
import { gapCursor } from "prosemirror-gapcursor"

const plugins = [
  history(),
  keymap(baseKeymap),
  dropCursor(),
  gapCursor(),
]
```

## 🎨 에디터 스타일링

### 다크 모드 대응
```typescript
const editorTheme = {
  light: {
    backgroundColor: "#ffffff",
    color: "#000000",
  },
  dark: {
    backgroundColor: "#1a1a1a",
    color: "#ffffff",
  },
}
```

### 반응형 디자인
```css
.editor-container {
  @apply w-full min-h-[400px] resize-y;
}

.editor-content {
  @apply p-4 focus:outline-none;
}
```

## 🔧 에디터 통합 패턴

### React 래퍼 컴포넌트
```typescript
interface EditorProps {
  value: string
  onChange: (value: string) => void
  language?: string
  theme?: "light" | "dark"
  readOnly?: boolean
}

const Editor = ({ value, onChange, language, theme, readOnly }: EditorProps) => {
  // 에디터 구현
}
```

### 상태 동기화
```typescript
const [content, setContent] = useState("")
const [isLoading, setIsLoading] = useState(false)

const handleChange = useCallback((newContent: string) => {
  setContent(newContent)
  // 디바운스된 저장
}, [])
```